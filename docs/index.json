{"repository_name":"github.com/watzon/cor","body":"# Cor\n\nCor (which means color in Portuguese) is a library for more easily\nworking with colors in Crystal. You can think of it as a more\npowerful version of `Colorize`. Cor allows you to very\neasily convert RGB(A) values to hex and back again for\nuse in CSS and HTML. It also provides a set of\nchainable methods for creting colorful strings\nfor the terminal using truecolor.\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     cor:\n       github: watzon/cor\n   ```\n\n2. Run `shards install`\n\n## Usage\n\n### Creating a color\n\n```crystal\nrequire \"cor\"\n\nred = Cor.new(255, 0, 0)\n# or you can do\nred = Cor.new(\"FF0000\")\n# or you can also do\nred = Cor.color(:red)\n```\n\nYou can also include an alpha value\n\n```crystal\nmid_red = Cor.new(255, 0, 0, 0.5)\n```\n\n### Getting a hex string\n\n```crystal\nblue = Cor.color(:blue)\nputs blue.hex_string\n# => 0000ff\n```\n\n`#hex_string` also provides a couple of formatting options\n\n```crystal\nputs blue.hex_string(prefix: true)\n# => #0000ff\n\nputs blue.hex_string(alpha: true)\n# => 0000ffff\n\nputs blue.hex_string(upcase: true)\n# => 0000FF\n```\n\n### Retting a RGB string\n\n```crystal\nmagenta = Cor.color(:magenta)\n\nputs magenta.rgb_string\n# => rgb(255, 0, 255)\n\nputs magenta.rgb_string(alpha: true)\n# => rgb(255, 0, 255, 1)\n```\n\n### Math with colors\n\nThe `Cor` class includes the basic math methods as well\nwhich means if, for whatever reason, you want to add,\nsubtract, multiply, or divide colors, you can.\n\n```crystal\nputs Cor.color(:magenta) - Cor.color(:blue)\n# => #<Cor:0x7f5892e2df60 @alpha=255, @blue=255, @green=0, @red=0>\n```\n\n### 24 bit truecolor strings\n\nMost modern terminals have support for [True color](https://www.wikiwand.com/en/Color_depth)\nwhich allows you to add color to your terminal output. Crystal\nalready has support for color output via the `Colorize`\nmodule in the standard library, but Cor takes things\na step further by allowing you to not only colorize\nyour output, but also bold, italicize, underline,\noverline, blink, etc.\n\nCor also provides a `String` patch that gives the `String` class\nchainable truecolor methods.\n\n```crystal\nrequire \"cor\"\nrequire \"cor/string\"\n\nputs \"This is awesome!\".fore(:blue).back(:white)\n\nputs \"Bold me!\".bold\nputs \"Italic me!\".italic\nputs \"Strike me!\".strike\nputs \"Blink me like it's 1999!\".blink\nputs \"Faint me!\".faint\nputs \"Underline me!\".underline\nputs \"Overline me!\".overline\n```\n\n## Development\n\nTODO: Write development instructions here\n\n## Contributing\n\n1. Fork it (<https://github.com/watzon/cor/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Chris Watson](https://github.com/watzon) - creator and maintainer\n","program":{"html_id":"github.com/watzon/cor/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"github.com/watzon/cor","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"github.com/watzon/cor/Cor","path":"Cor.html","kind":"class","full_name":"Cor","name":"Cor","abstract":false,"superclass":{"html_id":"github.com/watzon/cor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/watzon/cor/Cor/Colors","kind":"module","full_name":"Cor::Colors","name":"Colors"},{"html_id":"github.com/watzon/cor/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/watzon/cor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/watzon/cor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cor/colors.cr","line_number":1,"url":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/colors.cr"},{"filename":"cor/cor.cr","line_number":3,"url":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr"},{"filename":"cor.cr","line_number":12,"url":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor.cr"},{"filename":"cor/version.cr","line_number":1,"url":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/version.cr"}],"repository_name":"github.com/watzon/cor","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[{"html_id":"github.com/watzon/cor/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/watzon/cor/Cor/Colors","kind":"module","full_name":"Cor::Colors","name":"Colors"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Cor (which means color in Portuguese) is a library for more easily\nworking with colors in Crystal. You can think of it as a more\npowerful version of `Colorize`. Cor allows you to very\neasily convert RGB(A) values to hex and back again for\nuse in CSS and HTML. It also provides a set of\nchainable methods for creting colorful strings\nfor the terminal using truecolor.\n\nFor full usage instructions see the README.","summary":"<p>Cor (which means color in Portuguese) is a library for more easily working with colors in Crystal.</p>","class_methods":[{"id":"color(color)-class-method","html_id":"color(color)-class-method","name":"color","doc":"Gets one of the many color values defined in `COLORS`\nas a `Cor` instance.","summary":"<p>Gets one of the many color values defined in <code><a href=\"Cor/Colors.html#COLORS\">COLORS</a></code> as a <code><a href=\"Cor.html\">Cor</a></code> instance.</p>","abstract":false,"args":[{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":""}],"args_string":"(color)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L63","def":{"name":"color","args":[{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if COLORS.has_key?(color)\nelse\n  raise(\"the color #{color} has not been defined in `Cor`\")\nend\nnew(*COLORS[color])\n"}},{"id":"from_hsb(h,s,b)-class-method","html_id":"from_hsb(h,s,b)-class-method","name":"from_hsb","doc":"Create a new `Cor` instance from hue, saturation, and brightness.","summary":"<p>Create a new <code><a href=\"Cor.html\">Cor</a></code> instance from hue, saturation, and brightness.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":""},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":""}],"args_string":"(h, s, b)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L109","def":{"name":"from_hsb","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":""},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cor.from_hsl(h, s, b)"}},{"id":"from_hsl(h,s,l)-class-method","html_id":"from_hsl(h,s,l)-class-method","name":"from_hsl","doc":"Create a new `Cor` instance from hue, saturation, and lightness.","summary":"<p>Create a new <code><a href=\"Cor.html\">Cor</a></code> instance from hue, saturation, and lightness.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":""},{"name":"l","doc":null,"default_value":"","external_name":"l","restriction":""}],"args_string":"(h, s, l)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L90","def":{"name":"from_hsl","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":""},{"name":"l","doc":null,"default_value":"","external_name":"l","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"m2 = if l <= 0.5\n  l * (s + 1)\nelse\n  (l + s) - (l * s)\nend\nm1 = (l * 2) - m2\nrgb = [hue_to_rgb(m1, m2, h + (1.0 / 3)), hue_to_rgb(m1, m2, h), hue_to_rgb(m1, m2, h - (1.0 / 3))].map do |c|\n  (c * 255).round\nend\nnew(rgb[0], rgb[1], rgb[2])\n"}},{"id":"from_hsv(h,s,v)-class-method","html_id":"from_hsv(h,s,v)-class-method","name":"from_hsv","doc":"Create a new `Cor` instance from hue, saturation, and value.","summary":"<p>Create a new <code><a href=\"Cor.html\">Cor</a></code> instance from hue, saturation, and value.</p>","abstract":false,"args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""}],"args_string":"(h, s, v)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L69","def":{"name":"from_hsv","args":[{"name":"h","doc":null,"default_value":"","external_name":"h","restriction":""},{"name":"s","doc":null,"default_value":"","external_name":"s","restriction":""},{"name":"v","doc":null,"default_value":"","external_name":"v","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"h, s, v = h.to_f / 360, s.to_f / 100, v.to_f / 100\nh_i = (h * 6).to_i\nf = (h * 6) - h_i\np = v * (1 - s)\nq = v * (1 - (f * s))\nt = v * (1 - ((1 - f) * s))\nif h_i == 0\n  r, g, b = v, t, p\nend\nif h_i == 1\n  r, g, b = q, v, p\nend\nif h_i == 2\n  r, g, b = p, v, t\nend\nif h_i == 3\n  r, g, b = p, q, v\nend\nif h_i == 4\n  r, g, b = t, p, v\nend\nif h_i == 5\n  r, g, b = v, p, q\nend\nnew((r.not_nil! * 255).to_i, (g.not_nil! * 255).to_i, (b.not_nil! * 255).to_i)\n"}},{"id":"truecolor_string(string:String,fore=nil,back=nil,bold=false,faint=false,italic=false,underline=false,blink=false,strike=false,overline=false)-class-method","html_id":"truecolor_string(string:String,fore=nil,back=nil,bold=false,faint=false,italic=false,underline=false,blink=false,strike=false,overline=false)-class-method","name":"truecolor_string","doc":"Converts `string` to an ANSI escape sequence for use with\ntruecolor enabled terminals. `fore` and\n`back` can be either a `Cor` instance or\na symbol representing a `COLORS` value.","summary":"<p>Converts <code>string</code> to an ANSI escape sequence for use with truecolor enabled terminals.</p>","abstract":false,"args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"fore","doc":null,"default_value":"nil","external_name":"fore","restriction":""},{"name":"back","doc":null,"default_value":"nil","external_name":"back","restriction":""},{"name":"bold","doc":null,"default_value":"false","external_name":"bold","restriction":""},{"name":"faint","doc":null,"default_value":"false","external_name":"faint","restriction":""},{"name":"italic","doc":null,"default_value":"false","external_name":"italic","restriction":""},{"name":"underline","doc":null,"default_value":"false","external_name":"underline","restriction":""},{"name":"blink","doc":null,"default_value":"false","external_name":"blink","restriction":""},{"name":"strike","doc":null,"default_value":"false","external_name":"strike","restriction":""},{"name":"overline","doc":null,"default_value":"false","external_name":"overline","restriction":""}],"args_string":"(string : String, fore = <span class=\"n\">nil</span>, back = <span class=\"n\">nil</span>, bold = <span class=\"n\">false</span>, faint = <span class=\"n\">false</span>, italic = <span class=\"n\">false</span>, underline = <span class=\"n\">false</span>, blink = <span class=\"n\">false</span>, strike = <span class=\"n\">false</span>, overline = <span class=\"n\">false</span>)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L162","def":{"name":"truecolor_string","args":[{"name":"string","doc":null,"default_value":"","external_name":"string","restriction":"String"},{"name":"fore","doc":null,"default_value":"nil","external_name":"fore","restriction":""},{"name":"back","doc":null,"default_value":"nil","external_name":"back","restriction":""},{"name":"bold","doc":null,"default_value":"false","external_name":"bold","restriction":""},{"name":"faint","doc":null,"default_value":"false","external_name":"faint","restriction":""},{"name":"italic","doc":null,"default_value":"false","external_name":"italic","restriction":""},{"name":"underline","doc":null,"default_value":"false","external_name":"underline","restriction":""},{"name":"blink","doc":null,"default_value":"false","external_name":"blink","restriction":""},{"name":"strike","doc":null,"default_value":"false","external_name":"strike","restriction":""},{"name":"overline","doc":null,"default_value":"false","external_name":"overline","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"fore = fore.is_a?(Symbol) ? Cor.color(fore) : fore\nback = back.is_a?(Symbol) ? Cor.color(back) : back\nString.build do |str|\n  if bc = back\n    str << (sprintf(\"\\e[48;2;%d;%d;%dm\", [bc.red, bc.green, bc.blue]))\n  end\n  if fc = fore\n    str << (sprintf(\"\\e[38;2;%d;%d;%dm\", [fc.red, fc.green, fc.blue]))\n  end\n  if bold\n    str << \"\\e[1m\"\n  end\n  if faint\n    str << \"\\e[2m\"\n  end\n  if italic\n    str << \"\\e[3m\"\n  end\n  if underline\n    str << \"\\e[4m\"\n  end\n  if blink\n    str << \"\\e[5m\"\n  end\n  if strike\n    str << \"\\e[9m\"\n  end\n  if overline\n    str << \"\\e[53m\"\n  end\n  str << (sprintf(\"%s\\e[0m\", string))\nend\n"}}],"constructors":[{"id":"new(red,green,blue,alpha=255)-class-method","html_id":"new(red,green,blue,alpha=255)-class-method","name":"new","doc":"Creates a new `Cor` instance from `red`, `green`, `blue`\nand `alpha` values.","summary":"<p>Creates a new <code><a href=\"Cor.html\">Cor</a></code> instance from <code><a href=\"Cor.html#red%3AInt32-instance-method\">#red</a></code>, <code><a href=\"Cor.html#green%3AInt32-instance-method\">#green</a></code>, <code><a href=\"Cor.html#blue%3AInt32-instance-method\">#blue</a></code> and <code><a href=\"Cor.html#alpha%3AInt32-instance-method\">#alpha</a></code> values.</p>","abstract":false,"args":[{"name":"red","doc":null,"default_value":"","external_name":"red","restriction":""},{"name":"green","doc":null,"default_value":"","external_name":"green","restriction":""},{"name":"blue","doc":null,"default_value":"","external_name":"blue","restriction":""},{"name":"alpha","doc":null,"default_value":"255","external_name":"alpha","restriction":""}],"args_string":"(red, green, blue, alpha = <span class=\"n\">255</span>)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L21","def":{"name":"new","args":[{"name":"red","doc":null,"default_value":"","external_name":"red","restriction":""},{"name":"green","doc":null,"default_value":"","external_name":"green","restriction":""},{"name":"blue","doc":null,"default_value":"","external_name":"blue","restriction":""},{"name":"alpha","doc":null,"default_value":"255","external_name":"alpha","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(red, green, blue, alpha)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"id":"new(hex:String)-class-method","html_id":"new(hex:String)-class-method","name":"new","doc":"Creates a new `Cor` instance from a hex string.","summary":"<p>Creates a new <code><a href=\"Cor.html\">Cor</a></code> instance from a hex string.</p>","abstract":false,"args":[{"name":"hex","doc":null,"default_value":"","external_name":"hex","restriction":"String"}],"args_string":"(hex : String)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L31","def":{"name":"new","args":[{"name":"hex","doc":null,"default_value":"","external_name":"hex","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hex = hex.gsub(/^#/, \"\")\nif !(hex =~ (/[a-fA-F0-9]+/))\n  raise(\"hex string `#{hex}` contains invalid characters\")\nend\nif !([3, 6, 8].includes?(hex.size))\n  raise(\"hex string must be either 3, 6, or 8 characters long\")\nend\nif [3, 4].includes?(hex.size)\n  hex = (hex.split(\"\")).map(&.*(2)).join\nend\nif hex.size == 6\n  hex = hex + \"ff\"\nend\ncomponents = hex.scan(/.{2}/)\nred, green, blue, alpha = components.map do |__arg1|\n  __arg1[0].to_i(16)\nend\nnew(red, green, blue, alpha)\n"}}],"instance_methods":[{"id":"*(other:Cor)-instance-method","html_id":"*(other:Cor)-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Cor"}],"args_string":"(other : Cor)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L118","def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Cor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"arr = (self.to_tuple.zip(other.to_tuple)).map do |__arg2|\n  a = __arg2[0]\n  b = __arg2[1]\n  num = a * b\n  if num < 0\n    num = 0\n  end\n  if num > 255\n    num = 255\n  end\n  num\nend\nnew(arr[0], arr[1], arr[2], arr[3])\n"}},{"id":"+(other:Cor)-instance-method","html_id":"+(other:Cor)-instance-method","name":"+","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Cor"}],"args_string":"(other : Cor)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L118","def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Cor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"arr = (self.to_tuple.zip(other.to_tuple)).map do |__arg0|\n  a = __arg0[0]\n  b = __arg0[1]\n  num = a * b\n  if num < 0\n    num = 0\n  end\n  if num > 255\n    num = 255\n  end\n  num\nend\nnew(arr[0], arr[1], arr[2], arr[3])\n"}},{"id":"-(other:Cor)-instance-method","html_id":"-(other:Cor)-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Cor"}],"args_string":"(other : Cor)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L118","def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Cor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"arr = (self.to_tuple.zip(other.to_tuple)).map do |__arg1|\n  a = __arg1[0]\n  b = __arg1[1]\n  num = a * b\n  if num < 0\n    num = 0\n  end\n  if num > 255\n    num = 255\n  end\n  num\nend\nnew(arr[0], arr[1], arr[2], arr[3])\n"}},{"id":"/(other:Cor)-instance-method","html_id":"/(other:Cor)-instance-method","name":"/","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Cor"}],"args_string":"(other : Cor)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L118","def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Cor"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"arr = (self.to_tuple.zip(other.to_tuple)).map do |__arg3|\n  a = __arg3[0]\n  b = __arg3[1]\n  num = a * b\n  if num < 0\n    num = 0\n  end\n  if num > 255\n    num = 255\n  end\n  num\nend\nnew(arr[0], arr[1], arr[2], arr[3])\n"}},{"id":"(other)-instance-method","html_id":"(other)-instance-method","name":"<=>","doc":"Implements the comparison operator for `Cor`.","summary":"<p>Implements the comparison operator for <code><a href=\"Cor.html\">Cor</a></code>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"args_string":"(other)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L114","def":{"name":"<=>","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.to_a <=> other.to_a"}},{"id":"alpha:Int32-instance-method","html_id":"alpha:Int32-instance-method","name":"alpha","doc":"alpha (opacity) value for this color","summary":"<p>alpha (opacity) value for this color</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L19","def":{"name":"alpha","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@alpha"}},{"id":"alpha=(value)-instance-method","html_id":"alpha=(value)-instance-method","name":"alpha=","doc":"Set the alpha value for this color. Can be either\na float between 0 and 1, or a integer value\nbetween 0 and 255.","summary":"<p>Set the alpha value for this color.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L224","def":{"name":"alpha=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if value.is_a?(Float)\n  if value < 0.0 || value > 1.0\n    value = validate_color(value)\n    @alpha = value\n  else\n    @alpha = (value * 255).to_i\n  end\nelse\n  value = validate_color(value)\n  @alpha = value\nend"}},{"id":"blue:Int32-instance-method","html_id":"blue:Int32-instance-method","name":"blue","doc":"blue value for this color","summary":"<p>blue value for this color</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L16","def":{"name":"blue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@blue"}},{"id":"blue=(value)-instance-method","html_id":"blue=(value)-instance-method","name":"blue=","doc":"Set the blue value for this color","summary":"<p>Set the blue value for this color</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L216","def":{"name":"blue=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = validate_color(value)\n@blue = value\n"}},{"id":"green:Int32-instance-method","html_id":"green:Int32-instance-method","name":"green","doc":"green value for this color","summary":"<p>green value for this color</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L13","def":{"name":"green","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@green"}},{"id":"green=(value)-instance-method","html_id":"green=(value)-instance-method","name":"green=","doc":"Set the green value for this color","summary":"<p>Set the green value for this color</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L210","def":{"name":"green=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = validate_color(value)\n@red = value\n"}},{"id":"hex_string(prefix=false,alpha=false,upcase=false)-instance-method","html_id":"hex_string(prefix=false,alpha=false,upcase=false)-instance-method","name":"hex_string","doc":"Outputs this `Cor` instance as a `hex` string.","summary":"<p>Outputs this <code><a href=\"Cor.html\">Cor</a></code> instance as a <code>hex</code> string.</p>","abstract":false,"args":[{"name":"prefix","doc":null,"default_value":"false","external_name":"prefix","restriction":""},{"name":"alpha","doc":null,"default_value":"false","external_name":"alpha","restriction":""},{"name":"upcase","doc":null,"default_value":"false","external_name":"upcase","restriction":""}],"args_string":"(prefix = <span class=\"n\">false</span>, alpha = <span class=\"n\">false</span>, upcase = <span class=\"n\">false</span>)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L132","def":{"name":"hex_string","args":[{"name":"prefix","doc":null,"default_value":"false","external_name":"prefix","restriction":""},{"name":"alpha","doc":null,"default_value":"false","external_name":"alpha","restriction":""},{"name":"upcase","doc":null,"default_value":"false","external_name":"upcase","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hex = String.build do |str|\n  if prefix\n    str << \"#\"\n  end\n  str << [@red, @green, @blue].map do |i|\n    sprintf(\"%02x\", i)\n  end.join\nend\nif upcase\n  hex = hex.upcase\nend\nhex\n"}},{"id":"inverse-instance-method","html_id":"inverse-instance-method","name":"inverse","doc":"Returns a new `Cor` that's the inverse of self.","summary":"<p>Returns a new <code><a href=\"Cor.html\">Cor</a></code> that's the inverse of self.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L239","def":{"name":"inverse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"inverted = (hex_string(alpha: true).to_i(16)) ^ 16777215\ninverted = sprintf(\"%08x\", inverted)\nCor.new(inverted)\n"}},{"id":"pretty_print(pp)-instance-method","html_id":"pretty_print(pp)-instance-method","name":"pretty_print","doc":"Pretty print (it's a rainbow!)","summary":"<p>Pretty print (it's a rainbow!)</p>","abstract":false,"args":[{"name":"pp","doc":null,"default_value":"","external_name":"pp","restriction":""}],"args_string":"(pp)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L351","def":{"name":"pretty_print","args":[{"name":"pp","doc":null,"default_value":"","external_name":"pp","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"rainbow = ->(string : String) do\n  color_hash = Colors::COLORS.to_a\n  colors = (0.upto(string.size - 1)).to_a.map do |i|\n    color_hash[i + (rand(0..20))][0]\n  end\n  (string.split(\"\")).map_with_index do |c, i|\n    Cor.truecolor_string(c.to_s, colors[i])\n  end.join\nend\npp.text(rainbow.call(\"#<Cor: @red: #{@red}, @green: #{green}, @blue: #{blue}, @alpha: #{@alpha}>\"))\n"}},{"id":"red:Int32-instance-method","html_id":"red:Int32-instance-method","name":"red","doc":"red value for this color","summary":"<p>red value for this color</p>","abstract":false,"args":[],"args_string":" : Int32","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L10","def":{"name":"red","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@red"}},{"id":"red=(value)-instance-method","html_id":"red=(value)-instance-method","name":"red=","doc":"Set the red value for this color","summary":"<p>Set the red value for this color</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L204","def":{"name":"red=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value = validate_color(value)\n@red = value\n"}},{"id":"rgb_string(alpha=false)-instance-method","html_id":"rgb_string(alpha=false)-instance-method","name":"rgb_string","doc":"Outputs this `Cor` instance as a css `rgb(a)` string.","summary":"<p>Outputs this <code><a href=\"Cor.html\">Cor</a></code> instance as a css <code>rgb(a)</code> string.</p>","abstract":false,"args":[{"name":"alpha","doc":null,"default_value":"false","external_name":"alpha","restriction":""}],"args_string":"(alpha = <span class=\"n\">false</span>)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L142","def":{"name":"rgb_string","args":[{"name":"alpha","doc":null,"default_value":"false","external_name":"alpha","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"String.build do |str|\n  str << \"rgb\"\n  if alpha\n    str << \"a\"\n  end\n  str << \"(\"\n  str << ([@red, @green, @blue].join(\", \"))\n  if alpha\n    alpha = (@alpha.to_f64 / 255).round(2)\n    if alpha == 1.0\n      alpha = 1\n    end\n    if alpha == 0.0\n      alpha = 0\n    end\n    str << \", #{alpha}\"\n  end\n  str << \")\"\nend"}},{"id":"to_a-instance-method","html_id":"to_a-instance-method","name":"to_a","doc":"Convert the `Cor` to an array.","summary":"<p>Convert the <code><a href=\"Cor.html\">Cor</a></code> to an array.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L326","def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"[@red, @green, @blue, @alpha]"}},{"id":"to_h-instance-method","html_id":"to_h-instance-method","name":"to_h","doc":"Convert the `Cor` to a hash.","summary":"<p>Convert the <code><a href=\"Cor.html\">Cor</a></code> to a hash.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L336","def":{"name":"to_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{\"red\" => @red, \"green\" => @green, \"blue\" => @blue, \"alpha\" => @alpha}"}},{"id":"to_hsb-instance-method","html_id":"to_hsb-instance-method","name":"to_hsb","doc":"The HSb (hue / saturation / brightness) of the color","summary":"<p>The HSb (hue / saturation / brightness) of the color</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L320","def":{"name":"to_hsb","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"hsl = to_hsl\n{h: hsl[:h], s: hsl[:s], b: hsl[:l]}\n"}},{"id":"to_hsl-instance-method","html_id":"to_hsl-instance-method","name":"to_hsl","doc":"The HSV (hue / saturation / lightness) of the color","summary":"<p>The HSV (hue / saturation / lightness) of the color</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L282","def":{"name":"to_hsl","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"rgb = [@red / 255.0, @green / 255.0, @blue / 255.0]\nmin_rgb, max_rgb = rgb.min, rgb.max\ndelta = max_rgb - min_rgb\nl = (max_rgb + min_rgb) / 2.0\nif delta < 1e-5\n  h = s = 0\nelse\n  if l < 0.5\n    s = delta / (max_rgb + min_rgb)\n  else\n    s = delta / ((2 - max_rgb) - min_rgb)\n  end\n  deltas = rgb.map do |c|\n    (((max_rgb - c) / 6.0) + (delta / 2.0)) / delta\n  end\n  h = if (rgb[0] - max_rgb).abs < 1e-5\n    deltas[2] - deltas[1]\n  else\n    if (rgb[1] - max_rgb).abs < 1e-5\n      ((1.0 / 3.0) + deltas[0]) - deltas[2]\n    else\n      ((2.0 / 3.0) + deltas[1]) - deltas[0]\n    end\n  end\n  if h < 0\n    h = h + 1\n  end\n  if h > 1\n    h = h - 1\n  end\nend\n{h: h, s: s, l: l}\n"}},{"id":"to_hsv-instance-method","html_id":"to_hsv-instance-method","name":"to_hsv","doc":"The HSV (hue / saturation / value) of the color","summary":"<p>The HSV (hue / saturation / value) of the color</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L246","def":{"name":"to_hsv","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"r, g, b = @red.to_f / 255.0, @green.to_f / 255.0, @blue.to_f / 255.0\nmax = [r, g, b].max\nmin = [r, g, b].min\ndelta = max - min\nv = max * 100.0\nif (max != 0.0)\n  s = (delta / max) * 100.0\nelse\n  s = 0.0\nend\nif (s == 0.0)\n  h = 0.0\nelse\n  if (  r == max)\n    h = (g - b) / delta\n  else\n    if (    g == max)\n      h = 2.0 + ((b - r) / delta)\n    else\n      h = 4.0 + ((r - g) / delta)\n    end\n  end\n  h = h * 60.0\n  if (  h < 0)\n    h = h + 360.0\n  end\nend\n{h: h, s: s, v: v}\n"}},{"id":"to_s-instance-method","html_id":"to_s-instance-method","name":"to_s","doc":"Convert to a string","summary":"<p>Convert to a string</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L346","def":{"name":"to_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"\"Cor{#{@red}, #{@green}, #{blue}, #{@alpha}}\""}},{"id":"to_tuple-instance-method","html_id":"to_tuple-instance-method","name":"to_tuple","doc":"Convert the `Cor` to a tuple.","summary":"<p>Convert the <code><a href=\"Cor.html\">Cor</a></code> to a tuple.</p>","abstract":false,"args":[],"args_string":"","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/cor.cr#L331","def":{"name":"to_tuple","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"{@red, @green, @blue, @alpha}"}}],"macros":[],"types":[{"html_id":"github.com/watzon/cor/Cor/Colors","path":"Cor/Colors.html","kind":"module","full_name":"Cor::Colors","name":"Colors","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"cor/colors.cr","line_number":2,"url":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/colors.cr"}],"repository_name":"github.com/watzon/cor","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"COLORS","name":"COLORS","value":"{maroon: {128, 0, 0}, dark_red: {139, 0, 0}, brown: {165, 42, 42}, firebrick: {178, 34, 34}, crimson: {220, 20, 60}, red: {255, 0, 0}, tomato: {255, 99, 71}, coral: {255, 127, 80}, indian_red: {205, 92, 92}, light_coral: {240, 128, 128}, dark_salmon: {233, 150, 122}, salmon: {250, 128, 114}, light_salmon: {255, 160, 122}, orange_red: {255, 69, 0}, dark_orange: {255, 140, 0}, orange: {255, 165, 0}, gold: {255, 215, 0}, dark_golden_rod: {184, 134, 11}, golden_rod: {218, 165, 32}, pale_golden_rod: {238, 232, 170}, dark_khaki: {189, 183, 107}, khaki: {240, 230, 140}, olive: {128, 128, 0}, yellow: {255, 255, 0}, yellow_green: {154, 205, 50}, dark_olive_green: {85, 107, 47}, olive_drab: {107, 142, 35}, lawn_green: {124, 252, 0}, chart_reuse: {127, 255, 0}, green_yellow: {173, 255, 47}, dark_green: {0, 100, 0}, green: {0, 128, 0}, forest_green: {34, 139, 34}, lime: {0, 255, 0}, lime_green: {50, 205, 50}, light_green: {144, 238, 144}, pale_green: {152, 251, 152}, dark_sea_green: {143, 188, 143}, medium_spring_green: {0, 250, 154}, spring_green: {0, 255, 127}, sea_green: {46, 139, 87}, medium_aqua_marine: {102, 205, 170}, medium_sea_green: {60, 179, 113}, light_sea_green: {32, 178, 170}, dark_slate_gray: {47, 79, 79}, teal: {0, 128, 128}, dark_cyan: {0, 139, 139}, aqua: {0, 255, 255}, cyan: {0, 255, 255}, light_cyan: {224, 255, 255}, dark_turquoise: {0, 206, 209}, turquoise: {64, 224, 208}, medium_turquoise: {72, 209, 204}, pale_turquoise: {175, 238, 238}, aqua_marine: {127, 255, 212}, powder_blue: {176, 224, 230}, cadet_blue: {95, 158, 160}, steel_blue: {70, 130, 180}, corn_flower_blue: {100, 149, 237}, deep_sky_blue: {0, 191, 255}, dodger_blue: {30, 144, 255}, light_blue: {173, 216, 230}, sky_blue: {135, 206, 235}, light_sky_blue: {135, 206, 250}, midnight_blue: {25, 25, 112}, navy: {0, 0, 128}, dark_blue: {0, 0, 139}, medium_blue: {0, 0, 205}, blue: {0, 0, 255}, royal_blue: {65, 105, 225}, blue_violet: {138, 43, 226}, indigo: {75, 0, 130}, dark_slate_blue: {72, 61, 139}, slate_blue: {106, 90, 205}, medium_slate_blue: {123, 104, 238}, medium_purple: {147, 112, 219}, dark_magenta: {139, 0, 139}, dark_violet: {148, 0, 211}, dark_orchid: {153, 50, 204}, medium_orchid: {186, 85, 211}, purple: {128, 0, 128}, thistle: {216, 191, 216}, plum: {221, 160, 221}, violet: {238, 130, 238}, magenta: {255, 0, 255}, fuchsia: {255, 0, 255}, orchid: {218, 112, 214}, medium_violet_red: {199, 21, 133}, pale_violet_red: {219, 112, 147}, deep_pink: {255, 20, 147}, hot_pink: {255, 105, 180}, light_pink: {255, 182, 193}, pink: {255, 192, 203}, antique_white: {250, 235, 215}, beige: {245, 245, 220}, bisque: {255, 228, 196}, blanched_almond: {255, 235, 205}, wheat: {245, 222, 179}, corn_silk: {255, 248, 220}, lemon_chiffon: {255, 250, 205}, light_golden_rod_yellow: {250, 250, 210}, light_yellow: {255, 255, 224}, saddle_brown: {139, 69, 19}, sienna: {160, 82, 45}, chocolate: {210, 105, 30}, peru: {205, 133, 63}, sandy_brown: {244, 164, 96}, burly_wood: {222, 184, 135}, tan: {210, 180, 140}, rosy_brown: {188, 143, 143}, moccasin: {255, 228, 181}, navajo_white: {255, 222, 173}, peach_puff: {255, 218, 185}, misty_rose: {255, 228, 225}, lavender_blush: {255, 240, 245}, linen: {250, 240, 230}, old_lace: {253, 245, 230}, papaya_whip: {255, 239, 213}, sea_shell: {255, 245, 238}, mint_cream: {245, 255, 250}, slate_gray: {112, 128, 144}, light_slate_gray: {119, 136, 153}, light_steel_blue: {176, 196, 222}, lavender: {230, 230, 250}, floral_white: {255, 250, 240}, alice_blue: {240, 248, 255}, ghost_white: {248, 248, 255}, honeydew: {240, 255, 240}, ivory: {255, 255, 240}, azure: {240, 255, 255}, snow: {255, 250, 250}, black: {0, 0, 0}, dim_gray: {105, 105, 105}, dim_grey: {105, 105, 105}, gray: {128, 128, 128}, grey: {128, 128, 128}, dark_gray: {169, 169, 169}, dark_grey: {169, 169, 169}, silver: {192, 192, 192}, light_gray: {211, 211, 211}, light_grey: {211, 211, 211}, gainsboro: {220, 220, 220}, white_smoke: {245, 245, 245}, white: {255, 255, 255}}","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"github.com/watzon/cor/Cor","kind":"class","full_name":"Cor","name":"Cor"}],"namespace":{"html_id":"github.com/watzon/cor/Cor","kind":"class","full_name":"Cor","name":"Cor"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"github.com/watzon/cor/String","path":"String.html","kind":"class","full_name":"String","name":"String","abstract":false,"superclass":{"html_id":"github.com/watzon/cor/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"github.com/watzon/cor/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"github.com/watzon/cor/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"github.com/watzon/cor/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"cor/string.cr","line_number":1,"url":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr"}],"repository_name":"github.com/watzon/cor","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"github.com/watzon/cor/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `String` represents an immutable sequence of UTF-8 characters.\n\nA `String` is typically created with a string literal, enclosing UTF-8 characters\nin double quotes:\n\n```\n\"hello world\"\n```\n\nA backslash can be used to denote some characters inside the string:\n\n```\n\"\\\"\" # double quote\n\"\\\\\" # backslash\n\"\\e\" # escape\n\"\\f\" # form feed\n\"\\n\" # newline\n\"\\r\" # carriage return\n\"\\t\" # tab\n\"\\v\" # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n\"\\u0041\" # == \"A\"\n```\n\nOr you can use curly braces and specify up to six hexadecimal numbers (0 to 10FFFF):\n\n```\n\"\\u{41}\" # == \"A\"\n```\n\nA string can span multiple lines:\n\n```\n\"hello\n      world\" # same as \"hello\\n      world\"\n```\n\nNote that in the above example trailing and leading spaces, as well as newlines,\nend up in the resulting string. To avoid this, you can split a string into multiple lines\nby joining multiple literals with a backslash:\n\n```\n\"hello \" \\\n\"world, \" \\\n\"no newlines\" # same as \"hello world, no newlines\"\n```\n\nAlternatively, a backslash followed by a newline can be inserted inside the string literal:\n\n```\n\"hello \\\n     world, \\\n     no newlines\" # same as \"hello world, no newlines\"\n```\n\nIn this case, leading whitespace is not included in the resulting string.\n\nIf you need to write a string that has many double quotes, parentheses, or similar\ncharacters, you can use alternative literals:\n\n```\n# Supports double quotes and nested parentheses\n%(hello (\"world\")) # same as \"hello (\\\"world\\\")\"\n\n# Supports double quotes and nested brackets\n%[hello [\"world\"]] # same as \"hello [\\\"world\\\"]\"\n\n# Supports double quotes and nested curlies\n%{hello {\"world\"}} # same as \"hello {\\\"world\\\"}\"\n\n# Supports double quotes and nested angles\n%<hello <\"world\">> # same as \"hello <\\\"world\\\">\"\n```\n\nTo create a `String` with embedded expressions, you can use string interpolation:\n\n```\na = 1\nb = 2\n\"sum = #{a + b}\" # \"sum = 3\"\n```\n\nThis ends up invoking `Object#to_s(IO)` on each expression enclosed by `#{...}`.\n\nIf you need to dynamically build a string, use `String#build` or `IO::Memory`.\n\n### Non UTF-8 valid strings\n\nString might end up being conformed of bytes which are an invalid\nbyte sequence according to UTF-8. This can happen if the string is created\nvia one of the constructors that accept bytes, or when getting a string\nfrom `String.build` or `IO::Memory`. No exception will be raised, but\ninvalid byte sequences, when asked as chars, will use the unicode replacement\nchar (value 0xFFFD). For example:\n\n```\n# here 255 is not a valid byte value in the UTF-8 encoding\nstring = String.new(Bytes[255, 97])\nstring.valid_encoding? # => false\n\n# The first char here is the unicode replacement char\nstring.chars # => ['�', 'a']\n```\n\nOne can also create strings with specific byte value in them by\nusing octal and hexadecimal escape sequences:\n\n```\n# Octal escape sequences\n\"\\101\" # # => \"A\"\n\"\\12\"  # # => \"\\n\"\n\"\\1\"   # string with one character with code point 1\n\"\\377\" # string with one byte with value 255\n\n# Hexadecimal escape sequences\n\"\\x41\" # # => \"A\"\n\"\\xFF\" # string with one byte with value 255\n```\n\nThe reason for allowing strings that don't have a valid UTF-8 sequence\nis that the world is full of content that isn't properly encoded,\nand having a program raise an exception or stop because of this\nis not good. It's better if programs are more resilient, but\nshow a replacement character when there's an error in incoming data.","summary":"<p>A <code><a href=\"String.html\">String</a></code> represents an immutable sequence of UTF-8 characters.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"back(color):self-instance-method","html_id":"back(color):self-instance-method","name":"back","doc":null,"summary":null,"abstract":false,"args":[{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":""}],"args_string":"(color) : <span class=\"k\">self</span>","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L11","def":{"name":"back","args":[{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"color.is_a?(Symbol) ? Cor.color(color) : color\ntruecolor(back: color)\n"}},{"id":"blink:self-instance-method","html_id":"blink:self-instance-method","name":"blink","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L36","def":{"name":"blink","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"truecolor(blink: true)"}},{"id":"bold:self-instance-method","html_id":"bold:self-instance-method","name":"bold","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L24","def":{"name":"bold","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"truecolor(bold: true)"}},{"id":"faint:self-instance-method","html_id":"faint:self-instance-method","name":"faint","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L40","def":{"name":"faint","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"truecolor(faint: true)"}},{"id":"fore(color):self-instance-method","html_id":"fore(color):self-instance-method","name":"fore","doc":null,"summary":null,"abstract":false,"args":[{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":""}],"args_string":"(color) : <span class=\"k\">self</span>","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L6","def":{"name":"fore","args":[{"name":"color","doc":null,"default_value":"","external_name":"color","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"color.is_a?(Symbol) ? Cor.color(color) : color\ntruecolor(fore: color)\n"}},{"id":"italic:self-instance-method","html_id":"italic:self-instance-method","name":"italic","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L28","def":{"name":"italic","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"truecolor(italic: true)"}},{"id":"overline:self-instance-method","html_id":"overline:self-instance-method","name":"overline","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L20","def":{"name":"overline","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"truecolor(overline: true)"}},{"id":"strike:self-instance-method","html_id":"strike:self-instance-method","name":"strike","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L32","def":{"name":"strike","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"truecolor(strike: true)"}},{"id":"truecolor(**options)-instance-method","html_id":"truecolor(**options)-instance-method","name":"truecolor","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(**options)","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L2","def":{"name":"truecolor","args":[],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"Cor.truecolor_string(self, **options)"}},{"id":"underline:self-instance-method","html_id":"underline:self-instance-method","name":"underline","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : <span class=\"k\">self</span>","source_link":"https://github.com/watzon/cor/blob/419f3cded326d446a646fc2522ab98c9efee688a/src/cor/string.cr#L16","def":{"name":"underline","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"truecolor(underline: true)"}}],"macros":[],"types":[]}]}}